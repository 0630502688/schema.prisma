// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String
  password          String
  email             String
  role              String
  createdAt         DateTime          @default(now())
  orders            Order[]
  shippingAddresses ShippingAddress[]
  carts             Cart[]
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  stockQuantity Int
  imageUrl      String?
  orderItems    OrderItem[]
  carts         Cart[]
}

model Cart {
  id         Int      @id @default(autoincrement())
  userId     Int
  productId  Int
  quantity   Int
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id                Int             @id @default(autoincrement())
  userId            Int
  date              DateTime        @default(now())
  totalAmount       Float
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderItems        OrderItem[]
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shippingAddressId Int             @unique
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ShippingAddress {
  id      Int    @id @default(autoincrement())
  userId  Int
  address String
  city    String
  state   String
  zipCode String
  country String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  order   Order?
}

model Payment {
  id        Int     @id @default(autoincrement())
  orderId   Int
  amount    Float
  status    String
  createdAt DateTime @default(now())
}
